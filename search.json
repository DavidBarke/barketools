[{"path":"https://davidbarke.github.io/barketools/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 barketools authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://davidbarke.github.io/barketools/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"David Barkemeyer. Maintainer.","code":""},{"path":"https://davidbarke.github.io/barketools/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Barkemeyer D (2024). barketools: Collection functions find useful across projects. R package version 0.1.0, https://davidbarke.github.io/barketools/.","code":"@Manual{,   title = {barketools: Collection of functions that I find useful across projects},   author = {David Barkemeyer},   year = {2024},   note = {R package version 0.1.0},   url = {https://davidbarke.github.io/barketools/}, }"},{"path":"https://davidbarke.github.io/barketools/reference/apply_if.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply function if condition holds — apply_if","title":"Apply function if condition holds — apply_if","text":"Apply function condition holds","code":""},{"path":"https://davidbarke.github.io/barketools/reference/apply_if.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply function if condition holds — apply_if","text":"","code":"apply_if(x, cond, f)"},{"path":"https://davidbarke.github.io/barketools/reference/apply_if.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply function if condition holds — apply_if","text":"x Object function applied conditionally. cond Logical. f Function takes one argument x.","code":""},{"path":"https://davidbarke.github.io/barketools/reference/apply_if.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply function if condition holds — apply_if","text":"cond f(x), else x.","code":""},{"path":"https://davidbarke.github.io/barketools/reference/batch_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Split a vector into sequential batches — batch_vector","title":"Split a vector into sequential batches — batch_vector","text":"Split vector sequential batches","code":""},{"path":"https://davidbarke.github.io/barketools/reference/batch_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split a vector into sequential batches — batch_vector","text":"","code":"batch_vector(x, batch_size)"},{"path":"https://davidbarke.github.io/barketools/reference/batch_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split a vector into sequential batches — batch_vector","text":"x vector. batch_size integer.","code":""},{"path":"https://davidbarke.github.io/barketools/reference/batch_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split a vector into sequential batches — batch_vector","text":"list element contains batch_size elements x. last element list contains batch_size elements x.","code":""},{"path":"https://davidbarke.github.io/barketools/reference/cluster_desc.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster description — cluster_desc","title":"Cluster description — cluster_desc","text":"Cluster description","code":""},{"path":"https://davidbarke.github.io/barketools/reference/cluster_desc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster description — cluster_desc","text":"","code":"cluster_desc(   renv_directory,   rmd_file,   iterable,   iter_to_params,   output_file = \"output.log\",   image_id = \"ami-0438747454de030f3\",   instance_type = \"t2.small\",   terminate = TRUE,   security_group_ids = c(\"sg-01f269087c271cf61\", \"sg-0f0e8b61aa72dbdef\"),   renv_directory_cmds = NULL,   renv_directory_cmds_post = NULL )"},{"path":"https://davidbarke.github.io/barketools/reference/compute_patents_view_schema.html","id":null,"dir":"Reference","previous_headings":"","what":"Get PatentsView Schema — compute_patents_view_schema","title":"Get PatentsView Schema — compute_patents_view_schema","text":"function converts data download dictionary PatentsView https://patentsview.org/download/data-download-dictionary tibble.","code":""},{"path":"https://davidbarke.github.io/barketools/reference/compute_patents_view_schema.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get PatentsView Schema — compute_patents_view_schema","text":"","code":"compute_patents_view_schema()"},{"path":"https://davidbarke.github.io/barketools/reference/cusip8_to_cusip9.html","id":null,"dir":"Reference","previous_headings":"","what":"Map 8-digit CUSIP to 9-digit CUSIP — cusip8_to_cusip9","title":"Map 8-digit CUSIP to 9-digit CUSIP — cusip8_to_cusip9","text":"function computes check digit adds 8-digit CUSIP.","code":""},{"path":"https://davidbarke.github.io/barketools/reference/cusip8_to_cusip9.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map 8-digit CUSIP to 9-digit CUSIP — cusip8_to_cusip9","text":"","code":"cusip8_to_cusip9(cusip8)"},{"path":"https://davidbarke.github.io/barketools/reference/cusip8_to_cusip9.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map 8-digit CUSIP to 9-digit CUSIP — cusip8_to_cusip9","text":"cusip8 character vector 8-digit CUSIPs.","code":""},{"path":"https://davidbarke.github.io/barketools/reference/dfs_search.html","id":null,"dir":"Reference","previous_headings":"","what":"Small DFS Search — dfs_search","title":"Small DFS Search — dfs_search","text":"Search 100 keywords DataForSEO's Google Organic Search.","code":""},{"path":"https://davidbarke.github.io/barketools/reference/dfs_search.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Small DFS Search — dfs_search","text":"","code":"dfs_search(   keywords,   postback_url = Sys.getenv(\"POSTBACK_URL\"),   language_code = \"en\",   location_code = 2840,   username = Sys.getenv(\"DFS_USERNAME\"),   password = Sys.getenv(\"DFS_PASSWORD\") )"},{"path":"https://davidbarke.github.io/barketools/reference/dfs_search.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Small DFS Search — dfs_search","text":"keywords Character vector keywords. postback_url Postback URL DataForSEO sends search results. language_code Language code. location_code Location code, see https://api.dataforseo.com/v3/serp/google/locations.","code":""},{"path":"https://davidbarke.github.io/barketools/reference/dfs_search.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Small DFS Search — dfs_search","text":"Output httr2::req_perform.","code":""},{"path":"https://davidbarke.github.io/barketools/reference/dfs_search_reqs.html","id":null,"dir":"Reference","previous_headings":"","what":"Large DFS Search — dfs_search_reqs","title":"Large DFS Search — dfs_search_reqs","text":"Search 100 keywords DataForSEO's Google Organic Search. function constructs list requests. submitting requests, calling function ensure rate limit less 2,000 requests 100 keywords met.","code":""},{"path":"https://davidbarke.github.io/barketools/reference/dfs_search_reqs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Large DFS Search — dfs_search_reqs","text":"","code":"dfs_search_reqs(   keywords,   task_size = 100,   postback_url = Sys.getenv(\"POSTBACK_URL\"),   language_code = \"en\",   location_code = 2840,   username = Sys.getenv(\"DFS_USERNAME\"),   password = Sys.getenv(\"DFS_PASSWORD\") )"},{"path":"https://davidbarke.github.io/barketools/reference/dfs_search_reqs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Large DFS Search — dfs_search_reqs","text":"keywords Character vector keywords. task_size Number keywords put single request. Maximum 100. postback_url Postback URL DataForSEO sends search results. language_code Language code. location_code Location code, see https://api.dataforseo.com/v3/serp/google/locations.","code":""},{"path":"https://davidbarke.github.io/barketools/reference/dfs_search_reqs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Large DFS Search — dfs_search_reqs","text":"function assumes keywords already URL encoded, e.g., using urltools::url_encode.","code":""},{"path":"https://davidbarke.github.io/barketools/reference/download_patents_view.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a table from PatentsView — download_patents_view","title":"Read a table from PatentsView — download_patents_view","text":"Downloads zipped table patentsview.org, unzips , returns path unzipped file.","code":""},{"path":"https://davidbarke.github.io/barketools/reference/download_patents_view.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a table from PatentsView — download_patents_view","text":"","code":"download_patents_view(table)"},{"path":"https://davidbarke.github.io/barketools/reference/download_patents_view.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a table from PatentsView — download_patents_view","text":"table Table name, e.g., g_location_disambiguated.","code":""},{"path":"https://davidbarke.github.io/barketools/reference/download_patents_view.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read a table from PatentsView — download_patents_view","text":"Path unzipped tsv file.","code":""},{"path":"https://davidbarke.github.io/barketools/reference/download_patents_view_to_s3.html","id":null,"dir":"Reference","previous_headings":"","what":"Write a table from PatentsView to S3 — download_patents_view_to_s3","title":"Write a table from PatentsView to S3 — download_patents_view_to_s3","text":"Downloads zipped table patentsview.org, unzips , reads R using readr::read_tsv, writes s3_out.","code":""},{"path":"https://davidbarke.github.io/barketools/reference/download_patents_view_to_s3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write a table from PatentsView to S3 — download_patents_view_to_s3","text":"","code":"download_patents_view_to_s3(table, s3_out)"},{"path":"https://davidbarke.github.io/barketools/reference/download_patents_view_to_s3.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write a table from PatentsView to S3 — download_patents_view_to_s3","text":"table Table name, e.g., g_location_disambiguated. s3_out S3 path, e.g., s3://<bucket>/path","code":""},{"path":"https://davidbarke.github.io/barketools/reference/download_patents_view_to_s3_chunked.html","id":null,"dir":"Reference","previous_headings":"","what":"Write a table from PatentsView to S3 — download_patents_view_to_s3_chunked","title":"Write a table from PatentsView to S3 — download_patents_view_to_s3_chunked","text":"Downloads zipped table patentsview.org, unzips , reads R using readr::read_tsv_chunked, writes chunk s3_out.","code":""},{"path":"https://davidbarke.github.io/barketools/reference/download_patents_view_to_s3_chunked.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write a table from PatentsView to S3 — download_patents_view_to_s3_chunked","text":"","code":"download_patents_view_to_s3_chunked(   table,   s3_out,   chunk_size = 1e+05,   chunk_column_name = \"chunk\" )"},{"path":"https://davidbarke.github.io/barketools/reference/download_patents_view_to_s3_chunked.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write a table from PatentsView to S3 — download_patents_view_to_s3_chunked","text":"table Table name, e.g., g_location_disambiguated. s3_out S3 path, e.g., s3://<bucket>/path chunk_size number rows include chunk. chunk_column_name column name used partition data S3.","code":""},{"path":"https://davidbarke.github.io/barketools/reference/ec2_on_demand_limit.html","id":null,"dir":"Reference","previous_headings":"","what":"EC2 On-Demand Limit — ec2_on_demand_limit","title":"EC2 On-Demand Limit — ec2_on_demand_limit","text":"Returns service quota \"Running -Demand Standard (, C, D, H, , M, R, T, Z) instances\".","code":""},{"path":"https://davidbarke.github.io/barketools/reference/ec2_on_demand_limit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"EC2 On-Demand Limit — ec2_on_demand_limit","text":"","code":"ec2_on_demand_limit()"},{"path":"https://davidbarke.github.io/barketools/reference/ec2_vcpu_usage.html","id":null,"dir":"Reference","previous_headings":"","what":"EC2 vCPU Usage — ec2_vcpu_usage","title":"EC2 vCPU Usage — ec2_vcpu_usage","text":"Compute vCPU usage non-terminated instances.","code":""},{"path":"https://davidbarke.github.io/barketools/reference/ec2_vcpu_usage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"EC2 vCPU Usage — ec2_vcpu_usage","text":"","code":"ec2_vcpu_usage()"},{"path":"https://davidbarke.github.io/barketools/reference/ec2_vcpu_usage.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"EC2 vCPU Usage — ec2_vcpu_usage","text":"vCPU usage (integer).","code":""},{"path":"https://davidbarke.github.io/barketools/reference/execute_on_cluster.html","id":null,"dir":"Reference","previous_headings":"","what":"Execute a parameterized RMD on cluster — execute_on_cluster","title":"Execute a parameterized RMD on cluster — execute_on_cluster","text":"Execute parameterized RMD cluster","code":""},{"path":"https://davidbarke.github.io/barketools/reference/execute_on_cluster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Execute a parameterized RMD on cluster — execute_on_cluster","text":"","code":"execute_on_cluster(   renv_directory,   rmd_file,   iterable,   iter_to_params,   output_file = \"output.log\",   image_id = \"ami-0438747454de030f3\",   security_group_ids = c(\"sg-01f269087c271cf61\", \"sg-0f0e8b61aa72dbdef\"),   instance_type = \"t2.small\",   terminate = TRUE,   upload_s3_prefix = \"upload-rstudio-server-ubuntu-task\",   upload_s3_bucket = \"gcpd\",   renv_directory_cmds = NULL,   renv_directory_cmds_post = NULL )"},{"path":"https://davidbarke.github.io/barketools/reference/execute_on_cluster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Execute a parameterized RMD on cluster — execute_on_cluster","text":"renv_directory Path directory host machine managed renv dependencies installed AMI image. rmd_file Path RMD script relative renv_directory. iterable Vector list. separate instance launched element. iter_to_params Function transforms element iterable list parameters passed rmarkdown::render params argument. image_id AMI image id. instance based image. instance_type EC2 instance type. terminate TRUE terminate instance script completes. upload_s3_prefix Path JSON file describing cluster uploaded. default upload preconfigured folder S3 trigger lambda eventually create requested instances. upload_s3_bucket S3 bucket.","code":""},{"path":"https://davidbarke.github.io/barketools/reference/get_most_recent_inventory_date.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Most Recent Inventory Date — get_most_recent_inventory_date","title":"Get Most Recent Inventory Date — get_most_recent_inventory_date","text":"Get Recent Inventory Date","code":""},{"path":"https://davidbarke.github.io/barketools/reference/get_most_recent_inventory_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Most Recent Inventory Date — get_most_recent_inventory_date","text":"","code":"get_most_recent_inventory_date(bucket = \"gcpd\")"},{"path":"https://davidbarke.github.io/barketools/reference/get_most_recent_inventory_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Most Recent Inventory Date — get_most_recent_inventory_date","text":"bucket S3 bucket.","code":""},{"path":"https://davidbarke.github.io/barketools/reference/index_split.html","id":null,"dir":"Reference","previous_headings":"","what":"Split a vector into modulus batches — index_split","title":"Split a vector into modulus batches — index_split","text":"Split vector modulus batches","code":""},{"path":"https://davidbarke.github.io/barketools/reference/index_split.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split a vector into modulus batches — index_split","text":"","code":"index_split(x, n)"},{"path":"https://davidbarke.github.io/barketools/reference/index_split.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split a vector into modulus batches — index_split","text":"x vector. n integer.","code":""},{"path":"https://davidbarke.github.io/barketools/reference/index_split.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split a vector into modulus batches — index_split","text":"list n elements. -th element vector containing elements x belonging equivalence class respect modulus operation. means \\(x_1\\) \\(x_2\\) elements [] eqnx_1 mod n = x_2 mod n = .","code":""},{"path":"https://davidbarke.github.io/barketools/reference/list_to_str.html","id":null,"dir":"Reference","previous_headings":"","what":"Serialize a list into a string representation — list_to_str","title":"Serialize a list into a string representation — list_to_str","text":"works primitive types one level nesting","code":""},{"path":"https://davidbarke.github.io/barketools/reference/list_to_str.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Serialize a list into a string representation — list_to_str","text":"","code":"list_to_str(l, quote = \"'\")"},{"path":"https://davidbarke.github.io/barketools/reference/parse_year_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse RMarkdown Year Parameters — parse_year_params","title":"Parse RMarkdown Year Parameters — parse_year_params","text":"convenience function determine set years RMarkdown script run. useful RMarkdown script independently executes function year.","code":""},{"path":"https://davidbarke.github.io/barketools/reference/parse_year_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse RMarkdown Year Parameters — parse_year_params","text":"","code":"parse_year_params(params)"},{"path":"https://davidbarke.github.io/barketools/reference/parse_year_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse RMarkdown Year Parameters — parse_year_params","text":"params params object made available RMarkdown. fields years (comma-separated string years), year_start year_end. years different NULL (~ YAML), years takes precedence year_start year_end.","code":""},{"path":"https://davidbarke.github.io/barketools/reference/parse_year_params.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse RMarkdown Year Parameters — parse_year_params","text":"integer vector years.","code":""},{"path":"https://davidbarke.github.io/barketools/reference/patents_view_schema.html","id":null,"dir":"Reference","previous_headings":"","what":"PatentsView Schema — patents_view_schema","title":"PatentsView Schema — patents_view_schema","text":"dataset precomputed version patents_view_schema().","code":""},{"path":"https://davidbarke.github.io/barketools/reference/patents_view_schema.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PatentsView Schema — patents_view_schema","text":"","code":"patents_view_schema"},{"path":"https://davidbarke.github.io/barketools/reference/patents_view_schema.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"PatentsView Schema — patents_view_schema","text":"data frame 214 rows 7 columns: table Table name, e.g., \"g_applicant_not_disambiguated\" column Column name, e.g., \"patent_id\" column_type SQL column type, e.g., \"varchar(36)\" definition Column definition example Example value years_present Years data present r_column_type \"character\", \"integer\", \"date\"","code":""},{"path":"https://davidbarke.github.io/barketools/reference/patents_view_schema.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"PatentsView Schema — patents_view_schema","text":"https://patentsview.org/download/data-download-dictionary","code":""},{"path":"https://davidbarke.github.io/barketools/reference/print_if.html","id":null,"dir":"Reference","previous_headings":"","what":"Print object if condition holds — print_if","title":"Print object if condition holds — print_if","text":"Print object condition holds","code":""},{"path":"https://davidbarke.github.io/barketools/reference/print_if.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print object if condition holds — print_if","text":"","code":"print_if(x, cond)"},{"path":"https://davidbarke.github.io/barketools/reference/print_if.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print object if condition holds — print_if","text":"x Object printed conditionally. cond Logical. TRUE, x printed.","code":""},{"path":"https://davidbarke.github.io/barketools/reference/print_nrow.html","id":null,"dir":"Reference","previous_headings":"","what":"Print number of rows — print_nrow","title":"Print number of rows — print_nrow","text":"Print number rows","code":""},{"path":"https://davidbarke.github.io/barketools/reference/print_nrow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print number of rows — print_nrow","text":"","code":"print_nrow(df)"},{"path":"https://davidbarke.github.io/barketools/reference/print_nrow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print number of rows — print_nrow","text":"df Data frame.","code":""},{"path":"https://davidbarke.github.io/barketools/reference/read_inventory.html","id":null,"dir":"Reference","previous_headings":"","what":"Read Inventory — read_inventory","title":"Read Inventory — read_inventory","text":"Read Inventory","code":""},{"path":"https://davidbarke.github.io/barketools/reference/read_inventory.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read Inventory — read_inventory","text":"","code":"read_inventory(date = get_most_recent_inventory_date(), bucket)"},{"path":"https://davidbarke.github.io/barketools/reference/read_inventory.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read Inventory — read_inventory","text":"date Date format YYYY-MM-DD. bucket S3 bucket.","code":""},{"path":"https://davidbarke.github.io/barketools/reference/s3_key_exists.html","id":null,"dir":"Reference","previous_headings":"","what":"Check whether S3 key exists — s3_key_exists","title":"Check whether S3 key exists — s3_key_exists","text":"Check whether S3 key exists","code":""},{"path":"https://davidbarke.github.io/barketools/reference/s3_key_exists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check whether S3 key exists — s3_key_exists","text":"","code":"s3_key_exists(s3_key, bucket = \"gcpd\", verbose = FALSE)"},{"path":"https://davidbarke.github.io/barketools/reference/s3_key_exists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check whether S3 key exists — s3_key_exists","text":"s3_key S3 key.","code":""},{"path":"https://davidbarke.github.io/barketools/reference/s3_key_exists_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply s3_key_exists recursively to S3 keys in a list — s3_key_exists_list","title":"Apply s3_key_exists recursively to S3 keys in a list — s3_key_exists_list","text":"function raises error soon S3 key exist.","code":""},{"path":"https://davidbarke.github.io/barketools/reference/s3_key_exists_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply s3_key_exists recursively to S3 keys in a list — s3_key_exists_list","text":"","code":"s3_key_exists_list(   l,   predicate = function(l, name) is.character(l),   transform = identity,   verbose = FALSE )"},{"path":"https://davidbarke.github.io/barketools/reference/s3_key_exists_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply s3_key_exists recursively to S3 keys in a list — s3_key_exists_list","text":"l List. verbose TRUE, print output. is_s3_key Function determines elements treated S3 keys","code":""},{"path":"https://davidbarke.github.io/barketools/reference/s3_list_files.html","id":null,"dir":"Reference","previous_headings":"","what":"List Files on S3 — s3_list_files","title":"List Files on S3 — s3_list_files","text":"List Files S3","code":""},{"path":"https://davidbarke.github.io/barketools/reference/s3_list_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List Files on S3 — s3_list_files","text":"","code":"s3_list_files(   prefix = NULL,   bucket = \"gcpd\",   include_folder = FALSE,   max = 1000,   delimiter = NULL )"},{"path":"https://davidbarke.github.io/barketools/reference/s3_list_files.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List Files on S3 — s3_list_files","text":"prefix Common prefix files. bucket S3 bucket. include_folder TRUE, also include S3 keys referring folders. max Maximum number results return. delimiter Character string used group keys. Read AWS docs details. value See Value.","code":""},{"path":"https://davidbarke.github.io/barketools/reference/s3_list_files.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List Files on S3 — s3_list_files","text":"value == \"vector\", character vector S3 keys. value == \"df\" data frame S3 keys.","code":""},{"path":"https://davidbarke.github.io/barketools/reference/s3_list_subfolders.html","id":null,"dir":"Reference","previous_headings":"","what":"List S3 Subfolders — s3_list_subfolders","title":"List S3 Subfolders — s3_list_subfolders","text":"Subfolders exactly one level given prefix.","code":""},{"path":"https://davidbarke.github.io/barketools/reference/s3_list_subfolders.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List S3 Subfolders — s3_list_subfolders","text":"","code":"s3_list_subfolders(   prefix = NULL,   bucket = \"gcpd\",   max = 1000,   subfolder_only = FALSE )"},{"path":"https://davidbarke.github.io/barketools/reference/s3_list_subfolders.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List S3 Subfolders — s3_list_subfolders","text":"prefix Common prefix files. bucket S3 bucket. max Maximum number results return. subfolder_only Remove prefix subfolder S3 key.","code":""},{"path":"https://davidbarke.github.io/barketools/reference/s3_read_json.html","id":null,"dir":"Reference","previous_headings":"","what":"Read JSON file from S3 — s3_read_json","title":"Read JSON file from S3 — s3_read_json","text":"Read JSON file S3","code":""},{"path":"https://davidbarke.github.io/barketools/reference/s3_read_json.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read JSON file from S3 — s3_read_json","text":"","code":"s3_read_json(bucket, key)"},{"path":"https://davidbarke.github.io/barketools/reference/s3_read_json.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read JSON file from S3 — s3_read_json","text":"bucket S3 bucket. key S3 key JSON file.","code":""},{"path":"https://davidbarke.github.io/barketools/reference/s3_read_json.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read JSON file from S3 — s3_read_json","text":"list representing contents JSON file.","code":""},{"path":"https://davidbarke.github.io/barketools/reference/wrds_connect.html","id":null,"dir":"Reference","previous_headings":"","what":"Connect to WRDS — wrds_connect","title":"Connect to WRDS — wrds_connect","text":"Make sure setup local RStudio RStudioServer described linked websites.","code":""},{"path":"https://davidbarke.github.io/barketools/reference/wrds_connect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Connect to WRDS — wrds_connect","text":"","code":"wrds_connect(user)"},{"path":"https://davidbarke.github.io/barketools/reference/wrds_connect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Connect to WRDS — wrds_connect","text":"user Character. WRDS user name.","code":""},{"path":"https://davidbarke.github.io/barketools/reference/wrds_connect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Connect to WRDS — wrds_connect","text":"DBI connection WRDS.","code":""},{"path":"https://davidbarke.github.io/barketools/reference/wrds_schema_tables.html","id":null,"dir":"Reference","previous_headings":"","what":"WRDS Tables — wrds_schema_tables","title":"WRDS Tables — wrds_schema_tables","text":"Get available tables schema.","code":""},{"path":"https://davidbarke.github.io/barketools/reference/wrds_schema_tables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"WRDS Tables — wrds_schema_tables","text":"","code":"wrds_schema_tables(conn, schema)"},{"path":"https://davidbarke.github.io/barketools/reference/wrds_schema_tables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"WRDS Tables — wrds_schema_tables","text":"conn Database connection WRDS created wrds_connect. schema Name WRDS schema, e.g., \"crsp\".","code":""},{"path":"https://davidbarke.github.io/barketools/reference/wrds_schema_tables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"WRDS Tables — wrds_schema_tables","text":"tibble following columns: table_schema: schema. table_name: Table name. Use wrds_table_columns query column names table. table_type:  Table type. One \"BASE TABLE\", \"VIEW\" \"FOREIGN TABLE\".","code":""},{"path":"https://davidbarke.github.io/barketools/reference/wrds_schemata.html","id":null,"dir":"Reference","previous_headings":"","what":"WRDS Schemata — wrds_schemata","title":"WRDS Schemata — wrds_schemata","text":"Get available WRDS schemata.","code":""},{"path":"https://davidbarke.github.io/barketools/reference/wrds_schemata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"WRDS Schemata — wrds_schemata","text":"","code":"wrds_schemata(conn)"},{"path":"https://davidbarke.github.io/barketools/reference/wrds_schemata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"WRDS Schemata — wrds_schemata","text":"conn Database connection WRDS created wrds_connect.","code":""},{"path":"https://davidbarke.github.io/barketools/reference/wrds_schemata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"WRDS Schemata — wrds_schemata","text":"tibble following column: schema_name: Schema name. Use wrds_schema_tables query tables schema.","code":""},{"path":"https://davidbarke.github.io/barketools/reference/wrds_table_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"WRDS Table Columns — wrds_table_columns","title":"WRDS Table Columns — wrds_table_columns","text":"Get columns WRDS table.","code":""},{"path":"https://davidbarke.github.io/barketools/reference/wrds_table_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"WRDS Table Columns — wrds_table_columns","text":"","code":"wrds_table_columns(conn, schema, table)"},{"path":"https://davidbarke.github.io/barketools/reference/wrds_table_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"WRDS Table Columns — wrds_table_columns","text":"conn Database connection WRDS created wrds_connect. schema Name WRDS schema, e.g., \"crsp\". table Table name within given schema.","code":""},{"path":"https://davidbarke.github.io/barketools/reference/wrds_table_columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"WRDS Table Columns — wrds_table_columns","text":"tibble following columns: table_schema: schema. table_name: table. column_name: Column name. column_default: Default value. is_nullable: \"YES\" \"\". data_type: Data Type.","code":""},{"path":"https://davidbarke.github.io/barketools/reference/wrds_table_count.html","id":null,"dir":"Reference","previous_headings":"","what":"WRDS Table Count — wrds_table_count","title":"WRDS Table Count — wrds_table_count","text":"Get number records WRDS table","code":""},{"path":"https://davidbarke.github.io/barketools/reference/wrds_table_count.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"WRDS Table Count — wrds_table_count","text":"","code":"wrds_table_count(conn, schema, table)"},{"path":"https://davidbarke.github.io/barketools/reference/wrds_table_count.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"WRDS Table Count — wrds_table_count","text":"conn Database connection WRDS created wrds_connect. schema Name WRDS schema, e.g., \"crsp\". table Table name within given schema.","code":""},{"path":"https://davidbarke.github.io/barketools/reference/wrds_table_count.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"WRDS Table Count — wrds_table_count","text":"integer.","code":""},{"path":"https://davidbarke.github.io/barketools/reference/write_json_to_s3.html","id":null,"dir":"Reference","previous_headings":"","what":"Write JSON to S3 — write_json_to_s3","title":"Write JSON to S3 — write_json_to_s3","text":"Write JSON S3","code":""},{"path":"https://davidbarke.github.io/barketools/reference/write_json_to_s3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write JSON to S3 — write_json_to_s3","text":"","code":"write_json_to_s3(x, s3_key, bucket = \"gcpd\")"},{"path":"https://davidbarke.github.io/barketools/reference/write_json_to_s3.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write JSON to S3 — write_json_to_s3","text":"x List. s3_key S3 key. bucket S3 bucket.","code":""}]
